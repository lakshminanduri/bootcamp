"use strict";(self.webpackChunkretail_usa=self.webpackChunkretail_usa||[]).push([[2998],{7952:(O,R,b)=>{b.d(R,{I6:()=>F,LY:()=>A,XS:()=>g,_l:()=>S,sT:()=>k});var l=b(5e3),f=b(520),y=b(9158);const k={IBAN:"IBAN",BBAN:"BBAN",ID:"ID",EXTERNALID:"EXTERNAL_ID"},g=new l.OlP("PAYMENT_ORDER_OPTIONS_BASE_PATH");class T{constructor(o={}){this.apiKeys=o.apiKeys,this.username=o.username,this.password=o.password,this.accessToken=o.accessToken,this.basePath=o.basePath,this.withCredentials=o.withCredentials,this.encoder=o.encoder,this.credentials=o.credentials?o.credentials:{}}selectHeaderContentType(o){if(0===o.length)return;const e=o.find(t=>this.isJsonMime(t));return void 0===e?o[0]:e}selectHeaderAccept(o){if(0===o.length)return;const e=o.find(t=>this.isJsonMime(t));return void 0===e?o[0]:e}isJsonMime(o){const e=new RegExp("^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$","i");return null!==o&&(e.test(o)||"application/json-patch+json"===o.toLowerCase())}lookupCredential(o){const e=this.credentials[o];return"function"==typeof e?e():e}}new l.OlP("api-data-module PaymentOrderOptionsConfiguration");class I{encodeKey(o){return encodeURIComponent(o)}encodeValue(o){return encodeURIComponent(o)}decodeKey(o){return decodeURIComponent(o)}decodeValue(o){return decodeURIComponent(o)}}let S=(()=>{class r{constructor(e,t,n){this.httpClient=e,this.basePath="",this.defaultHeaders=new f.WM,this.configuration=new T,n&&(this.configuration=n),"string"!=typeof this.configuration.basePath&&("string"!=typeof t&&(t=this.basePath),this.configuration.basePath=t),this.encoder=this.configuration.encoder||new I}addToHttpParams(e,t,n){return"object"!=typeof t||t instanceof Date?this.addToHttpParamsRecursive(e,t,n):this.addToHttpParamsRecursive(e,t)}addToHttpParamsRecursive(e,t,n){if(null==t)return e;if("object"==typeof t)if(Array.isArray(t))t.forEach(a=>e=this.addToHttpParamsRecursive(e,a,n));else if(t instanceof Date){if(null==n)throw Error("key may not be null if value is Date");e=e.append(n,t.toISOString().substr(0,10))}else Object.keys(t).forEach(a=>e=this.addToHttpParamsRecursive(e,t[a],null!=n?`${n}.${a}`:a));else{if(null==n)throw Error("key may not be null if value is not object or array");e=e.append(n,t)}return e}getPaymentOptionsByPaymentType(e,t="body",n=!1,a){const d=e.paymentType;if(null==d)throw new Error("Required parameter paymentType was null or undefined when calling getPaymentOptionsByPaymentType.");let u=this.defaultHeaders,s=a&&a.httpHeaderAccept;void 0===s&&(s=this.configuration.selectHeaderAccept(["application/json"])),void 0!==s&&(u=u.set("Accept",s));let p="json";return s&&s.startsWith("text")&&(p="text"),this.httpClient.get(`${this.configuration.basePath}/client-api/v1/payment-options/${encodeURIComponent(String(d))}`,{responseType:p,withCredentials:this.configuration.withCredentials,headers:u,observe:t,reportProgress:n})}getPaymentOptionsByPaymentTypeUrl(e){const t=e.paymentType;if(null==t)throw new Error("Required parameter paymentType was null or undefined when calling getPaymentOptionsByPaymentType.");return`${this.configuration.basePath}/client-api/v1/payment-options/${encodeURIComponent(String(t))}`}postPaymentOptions(e,t="body",n=!1,a){const d=e.paymentOptionsRequest;let u=this.defaultHeaders,s=a&&a.httpHeaderAccept;void 0===s&&(s=this.configuration.selectHeaderAccept(["application/json"])),void 0!==s&&(u=u.set("Accept",s));const m=this.configuration.selectHeaderContentType(["application/json"]);void 0!==m&&(u=u.set("Content-Type",m));let h="json";return s&&s.startsWith("text")&&(h="text"),this.httpClient.post(`${this.configuration.basePath}/client-api/v1/payment-options`,d,{responseType:h,withCredentials:this.configuration.withCredentials,headers:u,observe:t,reportProgress:n})}postPaymentOptionsUrl(e){return`${this.configuration.basePath}/client-api/v1/payment-options`}}return r.\u0275fac=function(e){return new(e||r)(l.LFG(f.eN),l.LFG(g,8),l.LFG(T,8))},r.\u0275prov=l.Yz7({token:r,factory:r.\u0275fac,providedIn:"root"}),r})();(0,y.Ov)([{urlPattern:"/client-api/v1/payment-options/{paymentType}",method:"GET",responses:[{status:200,body:{paymentType:"US_FOREIGN_WIRE",canEditCounterparty:!0,paymentOptions:[{instructionPriority:"NORM",transferFee:{amount:"15.29",currencyCode:"USD"},chargeBearer:["OUR","SHA"],executionTimeFrame:{unit:"BUSINESS_DAY",max:1},cutOffTime:"16:00"},{instructionPriority:"HIGH",transferFee:{amount:"20.00",currencyCode:"USD"},chargeBearer:["OUR","SHA"],executionTimeFrame:{unit:"HOUR",min:1,max:2},cutOffTime:"16:00"}]}},{status:500,body:{message:"Description of error"}},{status:404,body:{message:"Resource not found.",errors:[{message:"Unable to find the resource requested resource: {resource}.",key:"common.api.resource",context:{resource:"aResource"}}]}}]}]),(0,y.Ov)([{urlPattern:"/client-api/v1/payment-options",method:"POST",responses:[{status:200,body:{options:[{paymentType:"US_FOREIGN_WIRE",paymentOptions:[{instructionPriority:"NORM",transferFee:{amount:"15.29",currencyCode:"USD"},chargeBearer:["OUR","SHA"],executionTimeFrame:{unit:"BUSINESS_DAY",max:1},cutOffTime:"16:00"},{instructionPriority:"HIGH",transferFee:{amount:"20.00",currencyCode:"USD"},chargeBearer:["OUR","SHA"],executionTimeFrame:{unit:"HOUR",min:1,max:2},cutOffTime:"16:00"}]}]}},{status:500,body:{message:"Description of error"}},{status:400,body:{message:"Bad Request",errors:[{message:"Value Exceeded. Must be between {min} and {max}.",key:"common.api.shoesize",context:{max:"50",min:"1"}}]}}]}]),(0,y.Ov)([{urlPattern:"/client-api/v1/payment-options/{paymentType}",method:"GET",responses:[{status:200,body:{paymentType:"US_FOREIGN_WIRE",canEditCounterparty:!0,paymentOptions:[{instructionPriority:"NORM",transferFee:{amount:"15.29",currencyCode:"USD"},chargeBearer:["OUR","SHA"],executionTimeFrame:{unit:"BUSINESS_DAY",max:1},cutOffTime:"16:00"},{instructionPriority:"HIGH",transferFee:{amount:"20.00",currencyCode:"USD"},chargeBearer:["OUR","SHA"],executionTimeFrame:{unit:"HOUR",min:1,max:2},cutOffTime:"16:00"}]}},{status:500,body:{message:"Description of error"}},{status:404,body:{message:"Resource not found.",errors:[{message:"Unable to find the resource requested resource: {resource}.",key:"common.api.resource",context:{resource:"aResource"}}]}}]},{urlPattern:"/client-api/v1/payment-options",method:"POST",responses:[{status:200,body:{options:[{paymentType:"US_FOREIGN_WIRE",paymentOptions:[{instructionPriority:"NORM",transferFee:{amount:"15.29",currencyCode:"USD"},chargeBearer:["OUR","SHA"],executionTimeFrame:{unit:"BUSINESS_DAY",max:1},cutOffTime:"16:00"},{instructionPriority:"HIGH",transferFee:{amount:"20.00",currencyCode:"USD"},chargeBearer:["OUR","SHA"],executionTimeFrame:{unit:"HOUR",min:1,max:2},cutOffTime:"16:00"}]}]}},{status:500,body:{message:"Description of error"}},{status:400,body:{message:"Bad Request",errors:[{message:"Value Exceeded. Must be between {min} and {max}.",key:"common.api.shoesize",context:{max:"50",min:"1"}}]}}]}]);let F=(()=>{class r{constructor(e,t,n){this.httpClient=e,this.basePath="",this.defaultHeaders=new f.WM,this.configuration=new T,n&&(this.configuration=n),"string"!=typeof this.configuration.basePath&&("string"!=typeof t&&(t=this.basePath),this.configuration.basePath=t),this.encoder=this.configuration.encoder||new I}addToHttpParams(e,t,n){return"object"!=typeof t||t instanceof Date?this.addToHttpParamsRecursive(e,t,n):this.addToHttpParamsRecursive(e,t)}addToHttpParamsRecursive(e,t,n){if(null==t)return e;if("object"==typeof t)if(Array.isArray(t))t.forEach(a=>e=this.addToHttpParamsRecursive(e,a,n));else if(t instanceof Date){if(null==n)throw Error("key may not be null if value is Date");e=e.append(n,t.toISOString().substr(0,10))}else Object.keys(t).forEach(a=>e=this.addToHttpParamsRecursive(e,t[a],null!=n?`${n}.${a}`:a));else{if(null==n)throw Error("key may not be null if value is not object or array");e=e.append(n,t)}return e}getSanctionedCountries(e,t="body",n=!1,a){const d=e.countryIso;let u=new f.LE({encoder:this.encoder});null!=d&&(u=this.addToHttpParams(u,d,"countryIso"));let s=this.defaultHeaders,p=a&&a.httpHeaderAccept;void 0===p&&(p=this.configuration.selectHeaderAccept(["application/json"])),void 0!==p&&(s=s.set("Accept",p));let m="json";return p&&p.startsWith("text")&&(m="text"),this.httpClient.get(`${this.configuration.basePath}/client-api/v1/sanctioned-countries`,{params:u,responseType:m,withCredentials:this.configuration.withCredentials,headers:s,observe:t,reportProgress:n})}getSanctionedCountriesUrl(e){const t=e.countryIso;let n=new f.LE({encoder:this.encoder});null!=t&&(n=this.addToHttpParams(n,t,"countryIso"));const a=n.toString();return`${this.configuration.basePath}/client-api/v1/sanctioned-countries${a?`?${a}`:""}`}}return r.\u0275fac=function(e){return new(e||r)(l.LFG(f.eN),l.LFG(g,8),l.LFG(T,8))},r.\u0275prov=l.Yz7({token:r,factory:r.\u0275fac,providedIn:"root"}),r})();(0,y.Ov)([{urlPattern:"/client-api/v1/sanctioned-countries",method:"GET",responses:[{status:200,body:{countries:[{country:"AE",inputFormSettings:[{key:"account-number",format:"IBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification",regex:"/^[a-zA-Z0-9]{23}$/"},{key:"bank-code",notApplicable:!0,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["AED","EUR","GBP","USD"]}]},{country:"AU",inputFormSettings:[{key:"account-number",format:"BBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification"},{key:"bank-code",label:{bsb:"BSB code"},mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode",regex:"/^[0-9]{6}$/"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["AUD","EUR","GBP","USD"]}]},{country:"BR",inputFormSettings:[{key:"account-number",format:"IBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification",regex:"/^[a-zA-Z0-9]{29}$/"},{key:"bank-code",notApplicable:!0,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["BRL","EUR","GBP","USD"]},{key:"purpose-of-payment",mandatory:!0}]},{country:"CA",inputFormSettings:[{key:"account-number",format:"BBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification"},{key:"bank-code",label:{"routing-number":"Routing number"},mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode",regex:"/^[0-9]{9}$/"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["CAD","EUR","GBP","USD"]}]},{country:"CN",inputFormSettings:[{key:"account-number",format:"BBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["EUR","GBP","USD"]},{key:"purpose-of-payment",mandatory:!0,notApplicable:!1,predefinedValues:!0}],purposesOfPayment:[{code:"PAYT/02123",description:"Individual Payment"},{code:"PAYT/02112",description:"Trade related Payment"},{code:"PAYT/02114",description:"Service related Payment"}]},{country:"GB",isDefault:!0,inputFormSettings:[{key:"account-number",format:"BBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification"},{key:"bank-code",label:{"sort-code":"Sort code"},mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode",regex:"/^[0-9]{6}$/"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["EUR","GBP","USD"]}]},{country:"HK",inputFormSettings:[{key:"account-number",format:"BBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification"},{key:"bank-code",label:{clearing:"Clearing code"},mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode",regex:"/^[0-9]{3}$/"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["HKD","EUR","GBP","USD"]}]},{country:"IN",inputFormSettings:[{key:"account-number",format:"BBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification"},{key:"bank-code",label:{ifsc:"IFSC"},mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode",regex:"/^[a-zA-Z0-9]{3}$/"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["INR","EUR","GBP","USD"]},{key:"purpose-of-payment",mandatory:!0,notApplicable:!1,predefinedValues:!0}],purposesOfPayment:[{code:"P1004",description:"Legal services"},{code:"P0401",description:"Postal services"},{code:"P0402",description:"Courier services"}]},{country:"JO",inputFormSettings:[{key:"account-number",format:"IBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification",regex:"/^[a-zA-Z0-9]{30}$/"},{key:"bank-code",notApplicable:!0,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["JOD","EUR","GBP","USD"]}]},{country:"JP",inputFormSettings:[{key:"account-number",format:"BBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification"},{key:"bank-code",notApplicable:!0,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["JPY","EUR","GBP","USD"]}]},{country:"NL",inputFormSettings:[{key:"account-number",format:"IBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification",regex:"/^[a-zA-Z0-9]{18}$/"},{key:"bank-code",notApplicable:!0,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["EUR","GBP","USD"]}]},{country:"RU",inputFormSettings:[{key:"account-number",format:"BBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification"},{key:"bank-code",label:{bik:"BIK"},mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode",regex:"/^[0-9]{9}$/"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["RUB","EUR","GBP","USD"]},{key:"purpose-of-payment",mandatory:!0,notApplicable:!1,predefinedValues:!0}],purposesOfPayment:[{code:"01010",description:"Selling by Residents of foreign currencies for Russian Roubles"},{code:"99010",description:"The return to Residents, of erroneously debited (credited) funds"},{code:"01030",description:"Purchases by Residents of foreign currencies for Russian Roubles"}]},{country:"SA",inputFormSettings:[{key:"account-number",format:"BBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification"},{key:"bank-code",label:{"za-code":"ZA code"},mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode",regex:"/^[0-9]{6}$/"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["ZAR","EUR","GBP","USD"]}]},{country:"SG",inputFormSettings:[{key:"account-number",format:"BBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification"},{key:"bank-code",notApplicable:!0,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["SGD","EUR","GBP","USD"]}]},{country:"US",inputFormSettings:[{key:"account-number",format:"BBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification"},{key:"bank-code",label:{"routing-number":"Routing transit number (ABA)"},mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode",regex:"/^[0-9]{9}$/"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["EUR","GBP","USD"]}]}]}},{status:500,body:{message:"Description of error"}}]}]),(0,y.Ov)([{urlPattern:"/client-api/v1/sanctioned-countries",method:"GET",responses:[{status:200,body:{countries:[{country:"AE",inputFormSettings:[{key:"account-number",format:"IBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification",regex:"/^[a-zA-Z0-9]{23}$/"},{key:"bank-code",notApplicable:!0,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["AED","EUR","GBP","USD"]}]},{country:"AU",inputFormSettings:[{key:"account-number",format:"BBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification"},{key:"bank-code",label:{bsb:"BSB code"},mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode",regex:"/^[0-9]{6}$/"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["AUD","EUR","GBP","USD"]}]},{country:"BR",inputFormSettings:[{key:"account-number",format:"IBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification",regex:"/^[a-zA-Z0-9]{29}$/"},{key:"bank-code",notApplicable:!0,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["BRL","EUR","GBP","USD"]},{key:"purpose-of-payment",mandatory:!0}]},{country:"CA",inputFormSettings:[{key:"account-number",format:"BBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification"},{key:"bank-code",label:{"routing-number":"Routing number"},mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode",regex:"/^[0-9]{9}$/"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["CAD","EUR","GBP","USD"]}]},{country:"CN",inputFormSettings:[{key:"account-number",format:"BBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["EUR","GBP","USD"]},{key:"purpose-of-payment",mandatory:!0,notApplicable:!1,predefinedValues:!0}],purposesOfPayment:[{code:"PAYT/02123",description:"Individual Payment"},{code:"PAYT/02112",description:"Trade related Payment"},{code:"PAYT/02114",description:"Service related Payment"}]},{country:"GB",isDefault:!0,inputFormSettings:[{key:"account-number",format:"BBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification"},{key:"bank-code",label:{"sort-code":"Sort code"},mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode",regex:"/^[0-9]{6}$/"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["EUR","GBP","USD"]}]},{country:"HK",inputFormSettings:[{key:"account-number",format:"BBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification"},{key:"bank-code",label:{clearing:"Clearing code"},mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode",regex:"/^[0-9]{3}$/"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["HKD","EUR","GBP","USD"]}]},{country:"IN",inputFormSettings:[{key:"account-number",format:"BBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification"},{key:"bank-code",label:{ifsc:"IFSC"},mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode",regex:"/^[a-zA-Z0-9]{3}$/"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["INR","EUR","GBP","USD"]},{key:"purpose-of-payment",mandatory:!0,notApplicable:!1,predefinedValues:!0}],purposesOfPayment:[{code:"P1004",description:"Legal services"},{code:"P0401",description:"Postal services"},{code:"P0402",description:"Courier services"}]},{country:"JO",inputFormSettings:[{key:"account-number",format:"IBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification",regex:"/^[a-zA-Z0-9]{30}$/"},{key:"bank-code",notApplicable:!0,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["JOD","EUR","GBP","USD"]}]},{country:"JP",inputFormSettings:[{key:"account-number",format:"BBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification"},{key:"bank-code",notApplicable:!0,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["JPY","EUR","GBP","USD"]}]},{country:"NL",inputFormSettings:[{key:"account-number",format:"IBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification",regex:"/^[a-zA-Z0-9]{18}$/"},{key:"bank-code",notApplicable:!0,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["EUR","GBP","USD"]}]},{country:"RU",inputFormSettings:[{key:"account-number",format:"BBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification"},{key:"bank-code",label:{bik:"BIK"},mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode",regex:"/^[0-9]{9}$/"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["RUB","EUR","GBP","USD"]},{key:"purpose-of-payment",mandatory:!0,notApplicable:!1,predefinedValues:!0}],purposesOfPayment:[{code:"01010",description:"Selling by Residents of foreign currencies for Russian Roubles"},{code:"99010",description:"The return to Residents, of erroneously debited (credited) funds"},{code:"01030",description:"Purchases by Residents of foreign currencies for Russian Roubles"}]},{country:"SA",inputFormSettings:[{key:"account-number",format:"BBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification"},{key:"bank-code",label:{"za-code":"ZA code"},mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode",regex:"/^[0-9]{6}$/"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["ZAR","EUR","GBP","USD"]}]},{country:"SG",inputFormSettings:[{key:"account-number",format:"BBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification"},{key:"bank-code",notApplicable:!0,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["SGD","EUR","GBP","USD"]}]},{country:"US",inputFormSettings:[{key:"account-number",format:"BBAN",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyAccount.identification.identification"},{key:"bank-code",label:{"routing-number":"Routing transit number (ABA)"},mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.counterpartyBank.bankBranchCode",regex:"/^[0-9]{9}$/"},{key:"currency",mandatory:!0,notApplicable:!1,apiField:"transferTransactionInformation.instructedAmount.currencyCode",values:["EUR","GBP","USD"]}]}]}},{status:500,body:{message:"Description of error"}}]}]);let A=(()=>{class r{constructor(e,t,n){this.httpClient=e,this.basePath="",this.defaultHeaders=new f.WM,this.configuration=new T,n&&(this.configuration=n),"string"!=typeof this.configuration.basePath&&("string"!=typeof t&&(t=this.basePath),this.configuration.basePath=t),this.encoder=this.configuration.encoder||new I}addToHttpParams(e,t,n){return"object"!=typeof t||t instanceof Date?this.addToHttpParamsRecursive(e,t,n):this.addToHttpParamsRecursive(e,t)}addToHttpParamsRecursive(e,t,n){if(null==t)return e;if("object"==typeof t)if(Array.isArray(t))t.forEach(a=>e=this.addToHttpParamsRecursive(e,a,n));else if(t instanceof Date){if(null==n)throw Error("key may not be null if value is Date");e=e.append(n,t.toISOString().substr(0,10))}else Object.keys(t).forEach(a=>e=this.addToHttpParamsRecursive(e,t[a],null!=n?`${n}.${a}`:a));else{if(null==n)throw Error("key may not be null if value is not object or array");e=e.append(n,t)}return e}getSanctionedCurrencies(e,t="body",n=!1,a){const d=e.countryIso;let u=new f.LE({encoder:this.encoder});null!=d&&(u=this.addToHttpParams(u,d,"countryIso"));let s=this.defaultHeaders,p=a&&a.httpHeaderAccept;void 0===p&&(p=this.configuration.selectHeaderAccept(["application/json"])),void 0!==p&&(s=s.set("Accept",p));let m="json";return p&&p.startsWith("text")&&(m="text"),this.httpClient.get(`${this.configuration.basePath}/client-api/v1/sanctioned-currencies`,{params:u,responseType:m,withCredentials:this.configuration.withCredentials,headers:s,observe:t,reportProgress:n})}getSanctionedCurrenciesUrl(e){const t=e.countryIso;let n=new f.LE({encoder:this.encoder});null!=t&&(n=this.addToHttpParams(n,t,"countryIso"));const a=n.toString();return`${this.configuration.basePath}/client-api/v1/sanctioned-currencies${a?`?${a}`:""}`}}return r.\u0275fac=function(e){return new(e||r)(l.LFG(f.eN),l.LFG(g,8),l.LFG(T,8))},r.\u0275prov=l.Yz7({token:r,factory:r.\u0275fac,providedIn:"root"}),r})();(0,y.Ov)([{urlPattern:"/client-api/v1/sanctioned-currencies",method:"GET",responses:[{status:200,body:{default:{code:"GBP",decimals:2},labeled:{normal:[{code:"AED",decimals:2},{code:"AUD",decimals:2},{code:"BRL",decimals:2},{code:"CAD",decimals:2},{code:"CNY",decimals:2},{code:"HKD",decimals:2},{code:"INR",decimals:2},{code:"JPY",decimals:0},{code:"JOD",decimals:3},{code:"RUB",decimals:2},{code:"SGD",decimals:2},{code:"ZAR",decimals:2}],popular:[{code:"EUR",decimals:2},{code:"GBP",decimals:2},{code:"USD",decimals:2}]}}},{status:500,body:{message:"Description of error"}}]}]),(0,y.Ov)([{urlPattern:"/client-api/v1/sanctioned-currencies",method:"GET",responses:[{status:200,body:{default:{code:"GBP",decimals:2},labeled:{normal:[{code:"AED",decimals:2},{code:"AUD",decimals:2},{code:"BRL",decimals:2},{code:"CAD",decimals:2},{code:"CNY",decimals:2},{code:"HKD",decimals:2},{code:"INR",decimals:2},{code:"JPY",decimals:0},{code:"JOD",decimals:3},{code:"RUB",decimals:2},{code:"SGD",decimals:2},{code:"ZAR",decimals:2}],popular:[{code:"EUR",decimals:2},{code:"GBP",decimals:2},{code:"USD",decimals:2}]}}},{status:500,body:{message:"Description of error"}}]}])},2194:(O,R,b)=>{b.d(R,{Kl:()=>E,NE:()=>P});var l=b(5e3),f=b(520),y=b(9158);const P=new l.OlP("PAYMENT_TEMPLATE_BASE_PATH");class B{constructor(c={}){this.apiKeys=c.apiKeys,this.username=c.username,this.password=c.password,this.accessToken=c.accessToken,this.basePath=c.basePath,this.withCredentials=c.withCredentials,this.encoder=c.encoder,this.credentials=c.credentials?c.credentials:{}}selectHeaderContentType(c){if(0===c.length)return;const i=c.find(r=>this.isJsonMime(r));return void 0===i?c[0]:i}selectHeaderAccept(c){if(0===c.length)return;const i=c.find(r=>this.isJsonMime(r));return void 0===i?c[0]:i}isJsonMime(c){const i=new RegExp("^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$","i");return null!==c&&(i.test(c)||"application/json-patch+json"===c.toLowerCase())}lookupCredential(c){const i=this.credentials[c];return"function"==typeof i?i():i}}new l.OlP("api-data-module PaymentTemplateConfiguration");class S{encodeKey(c){return encodeURIComponent(c)}encodeValue(c){return encodeURIComponent(c)}decodeKey(c){return decodeURIComponent(c)}decodeValue(c){return decodeURIComponent(c)}}let E=(()=>{class A{constructor(i,r,o){this.httpClient=i,this.basePath="",this.defaultHeaders=new f.WM,this.configuration=new B,o&&(this.configuration=o),"string"!=typeof this.configuration.basePath&&("string"!=typeof r&&(r=this.basePath),this.configuration.basePath=r),this.encoder=this.configuration.encoder||new S}addToHttpParams(i,r,o){return"object"!=typeof r||r instanceof Date?this.addToHttpParamsRecursive(i,r,o):this.addToHttpParamsRecursive(i,r)}addToHttpParamsRecursive(i,r,o){if(null==r)return i;if("object"==typeof r)if(Array.isArray(r))r.forEach(e=>i=this.addToHttpParamsRecursive(i,e,o));else if(r instanceof Date){if(null==o)throw Error("key may not be null if value is Date");i=i.append(o,r.toISOString().substr(0,10))}else Object.keys(r).forEach(e=>i=this.addToHttpParamsRecursive(i,r[e],null!=o?`${o}.${e}`:e));else{if(null==o)throw Error("key may not be null if value is not object or array");i=i.append(o,r)}return i}deletePaymentTemplateIdByPaymentTemplateId(i,r="body",o=!1,e){const t=i.paymentTemplateId;if(null==t)throw new Error("Required parameter paymentTemplateId was null or undefined when calling deletePaymentTemplateIdByPaymentTemplateId.");let n=this.defaultHeaders,a=e&&e.httpHeaderAccept;void 0===a&&(a=this.configuration.selectHeaderAccept(["application/json"])),void 0!==a&&(n=n.set("Accept",a));let d="json";return a&&a.startsWith("text")&&(d="text"),this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/payment-templates/${encodeURIComponent(String(t))}`,{responseType:d,withCredentials:this.configuration.withCredentials,headers:n,observe:r,reportProgress:o})}deletePaymentTemplateIdByPaymentTemplateIdUrl(i){const r=i.paymentTemplateId;if(null==r)throw new Error("Required parameter paymentTemplateId was null or undefined when calling deletePaymentTemplateIdByPaymentTemplateId.");return`${this.configuration.basePath}/client-api/v2/payment-templates/${encodeURIComponent(String(r))}`}getPaymentTemplates(i,r="body",o=!1,e){const t=i.query,n=i.intendedAction,a=i.paymentType,d=i.from,u=i.size;let s=new f.LE({encoder:this.encoder});null!=t&&(s=this.addToHttpParams(s,t,"query")),null!=n&&(s=this.addToHttpParams(s,n,"intendedAction")),null!=a&&(s=this.addToHttpParams(s,a,"paymentType")),null!=d&&(s=this.addToHttpParams(s,d,"from")),null!=u&&(s=this.addToHttpParams(s,u,"size"));let p=this.defaultHeaders,m=e&&e.httpHeaderAccept;void 0===m&&(m=this.configuration.selectHeaderAccept(["application/json"])),void 0!==m&&(p=p.set("Accept",m));let h="json";return m&&m.startsWith("text")&&(h="text"),this.httpClient.get(`${this.configuration.basePath}/client-api/v2/payment-templates`,{params:s,responseType:h,withCredentials:this.configuration.withCredentials,headers:p,observe:r,reportProgress:o})}getPaymentTemplatesUrl(i){const r=i.query,o=i.intendedAction,e=i.paymentType,t=i.from,n=i.size;let a=new f.LE({encoder:this.encoder});null!=r&&(a=this.addToHttpParams(a,r,"query")),null!=o&&(a=this.addToHttpParams(a,o,"intendedAction")),null!=e&&(a=this.addToHttpParams(a,e,"paymentType")),null!=t&&(a=this.addToHttpParams(a,t,"from")),null!=n&&(a=this.addToHttpParams(a,n,"size"));const d=a.toString();return`${this.configuration.basePath}/client-api/v2/payment-templates${d?`?${d}`:""}`}postPaymentTemplates(i,r="body",o=!1,e){const t=i.paymentTemplatesPostRequest;if(null==t)throw new Error("Required parameter paymentTemplatesPostRequest was null or undefined when calling postPaymentTemplates.");let n=this.defaultHeaders,a=e&&e.httpHeaderAccept;void 0===a&&(a=this.configuration.selectHeaderAccept(["application/json"])),void 0!==a&&(n=n.set("Accept",a));const u=this.configuration.selectHeaderContentType(["application/json"]);void 0!==u&&(n=n.set("Content-Type",u));let s="json";return a&&a.startsWith("text")&&(s="text"),this.httpClient.post(`${this.configuration.basePath}/client-api/v2/payment-templates`,t,{responseType:s,withCredentials:this.configuration.withCredentials,headers:n,observe:r,reportProgress:o})}postPaymentTemplatesUrl(i){if(null==i.paymentTemplatesPostRequest)throw new Error("Required parameter paymentTemplatesPostRequest was null or undefined when calling postPaymentTemplates.");return`${this.configuration.basePath}/client-api/v2/payment-templates`}putPaymentTemplateById(i,r="body",o=!1,e){const t=i.paymentTemplateId;if(null==t)throw new Error("Required parameter paymentTemplateId was null or undefined when calling putPaymentTemplateById.");const n=i.paymentTemplatesPutRequest;if(null==n)throw new Error("Required parameter paymentTemplatesPutRequest was null or undefined when calling putPaymentTemplateById.");let a=this.defaultHeaders,d=e&&e.httpHeaderAccept;void 0===d&&(d=this.configuration.selectHeaderAccept(["application/json"])),void 0!==d&&(a=a.set("Accept",d));const s=this.configuration.selectHeaderContentType(["application/json"]);void 0!==s&&(a=a.set("Content-Type",s));let p="json";return d&&d.startsWith("text")&&(p="text"),this.httpClient.put(`${this.configuration.basePath}/client-api/v2/payment-templates/${encodeURIComponent(String(t))}`,n,{responseType:p,withCredentials:this.configuration.withCredentials,headers:a,observe:r,reportProgress:o})}putPaymentTemplateByIdUrl(i){const r=i.paymentTemplateId;if(null==r)throw new Error("Required parameter paymentTemplateId was null or undefined when calling putPaymentTemplateById.");if(null==i.paymentTemplatesPutRequest)throw new Error("Required parameter paymentTemplatesPutRequest was null or undefined when calling putPaymentTemplateById.");return`${this.configuration.basePath}/client-api/v2/payment-templates/${encodeURIComponent(String(r))}`}}return A.\u0275fac=function(i){return new(i||A)(l.LFG(f.eN),l.LFG(P,8),l.LFG(B,8))},A.\u0275prov=l.Yz7({token:A,factory:A.\u0275fac,providedIn:"root"}),A})();(0,y.Ov)([{urlPattern:"/client-api/v2/payment-templates/{paymentTemplateId}",method:"DELETE",responses:[{status:204,body:""},{status:403,body:{message:"Access to requested resource denied.",errors:[{message:"Resource access denied due to an insufficient user quota of {quota}.",key:"common.api.quota",context:{quota:"someQuota"}}]}}]}]),(0,y.Ov)([{urlPattern:"/client-api/v2/payment-templates",method:"GET",responses:[{status:200,body:[{id:"7d341c28-6714-11e7-907b-a6006ad3dba0",name:"Textile supplier invoice",createdAt:"2020-04-12T14:33:13.452Z",serviceAgreementId:"d6fdc581-1306-412a-9e40-86d851190acf",details:{paymentType:"SEPA_CREDIT_TRANSFER",originatorAccount:{arrangementId:"729190df-a421-4937-94fd-5e1a3da132cc",externalArrangementId:"729190421493794513132",identification:{identification:"NL53RABO0309349755",schemeName:"IBAN"},name:"Smith Bonus Savings"},instructionPriority:"NORM",transferTransactionInformation:{counterparty:{name:"Backbase",postalAddress:{addressLine1:"Jacob Bontiusplaats 9, 1018LL, Amsterdam",country:"NL"}},counterpartyAccount:{identification:{identification:"FR708933019952AUNHQNQ0KZ",schemeName:"IBAN"},arrangementId:"fe9d66ae-b927-4ac7-8799-c5a38a596ff2",externalArrangementId:"9669274787995385962"},instructedAmount:{amount:"5000.55",currencyCode:"EUR"},remittanceInformation:"Salary"}}}]},{status:400,body:{message:"Bad Request",errors:[{message:"Value Exceeded. Must be between {min} and {max}.",key:"common.api.shoesize",context:{max:"50",min:"1"}}]}},{status:403,body:{message:"Access to requested resource denied.",errors:[{message:"Resource access denied due to an insufficient user quota of {quota}.",key:"common.api.quota",context:{quota:"someQuota"}}]}}]}]),(0,y.Ov)([{urlPattern:"/client-api/v2/payment-templates",method:"POST",responses:[{status:201,body:{template:{id:"7d341c28-6714-11e7-907b-a6006ad3dba0",name:"Salary for John",createdAt:"2020-04-12T14:33:13.452Z",serviceAgreementId:"d6fdc581-1306-412a-9e40-86d851190acf",details:{paymentType:"SEPA_CREDIT_TRANSFER",originatorAccount:{arrangementId:"729190df-a421-4937-94fd-5e1a3da132cc",externalArrangementId:"729190421493794513132",identification:{identification:"NL53RABO0309349755",schemeName:"IBAN"}},instructionPriority:"NORM",transferTransactionInformation:{counterparty:{name:"John Smith",postalAddress:{addressLine1:"Schippersstraat 15, 1011AZ, Amsterdam",country:"NL"}},counterpartyAccount:{identification:{identification:"FR708933019952AUNHQNQ0KZ",schemeName:"IBAN"},arrangementId:"fe9d66ae-b927-4ac7-8799-c5a38a596ff2",externalArrangementId:"9669274787995385962"},instructedAmount:{amount:"5000.55",currencyCode:"EUR"},remittanceInformation:"Salary"}}}}},{status:400,body:{message:"Bad Request",errors:[{message:"Value Exceeded. Must be between {min} and {max}.",key:"common.api.shoesize",context:{max:"50",min:"1"}}]}},{status:403,body:{message:"Access to requested resource denied.",errors:[{message:"Resource access denied due to an insufficient user quota of {quota}.",key:"common.api.quota",context:{quota:"someQuota"}}]}}]}]),(0,y.Ov)([{urlPattern:"/client-api/v2/payment-templates/{paymentTemplateId}",method:"PUT",responses:[{status:202,body:{template:{id:"7d341c28-6714-11e7-907b-a6006ad3dba0",name:"Salary for John",createdAt:"2020-04-12T14:33:13.452Z",serviceAgreementId:"d6fdc581-1306-412a-9e40-86d851190acf",details:{paymentType:"SEPA_CREDIT_TRANSFER",originatorAccount:{arrangementId:"729190df-a421-4937-94fd-5e1a3da132cc",externalArrangementId:"729190421493794513132",identification:{identification:"NL53RABO0309349755",schemeName:"IBAN"}},instructionPriority:"NORM",transferTransactionInformation:{counterparty:{name:"John Smith",postalAddress:{addressLine1:"Schippersstraat 15, 1011AZ, Amsterdam",country:"NL"}},counterpartyAccount:{identification:{identification:"FR708933019952AUNHQNQ0KZ",schemeName:"IBAN"},arrangementId:"fe9d66ae-b927-4ac7-8799-c5a38a596ff2",externalArrangementId:"9669274787995385962"},instructedAmount:{amount:"5000.55",currencyCode:"EUR"},remittanceInformation:"Salary"}}}}},{status:400,body:{message:"Bad Request",errors:[{message:"Value Exceeded. Must be between {min} and {max}.",key:"common.api.shoesize",context:{max:"50",min:"1"}}]}},{status:403,body:{message:"Access to requested resource denied.",errors:[{message:"Resource access denied due to an insufficient user quota of {quota}.",key:"common.api.quota",context:{quota:"someQuota"}}]}},{status:404,body:{message:"Resource not found.",errors:[{message:"Unable to find the resource requested resource: {resource}.",key:"common.api.resource",context:{resource:"aResource"}}]}}]}]),(0,y.Ov)([{urlPattern:"/client-api/v2/payment-templates/{paymentTemplateId}",method:"DELETE",responses:[{status:204,body:""},{status:403,body:{message:"Access to requested resource denied.",errors:[{message:"Resource access denied due to an insufficient user quota of {quota}.",key:"common.api.quota",context:{quota:"someQuota"}}]}}]},{urlPattern:"/client-api/v2/payment-templates",method:"GET",responses:[{status:200,body:[{id:"7d341c28-6714-11e7-907b-a6006ad3dba0",name:"Textile supplier invoice",createdAt:"2020-04-12T14:33:13.452Z",serviceAgreementId:"d6fdc581-1306-412a-9e40-86d851190acf",details:{paymentType:"SEPA_CREDIT_TRANSFER",originatorAccount:{arrangementId:"729190df-a421-4937-94fd-5e1a3da132cc",externalArrangementId:"729190421493794513132",identification:{identification:"NL53RABO0309349755",schemeName:"IBAN"},name:"Smith Bonus Savings"},instructionPriority:"NORM",transferTransactionInformation:{counterparty:{name:"Backbase",postalAddress:{addressLine1:"Jacob Bontiusplaats 9, 1018LL, Amsterdam",country:"NL"}},counterpartyAccount:{identification:{identification:"FR708933019952AUNHQNQ0KZ",schemeName:"IBAN"},arrangementId:"fe9d66ae-b927-4ac7-8799-c5a38a596ff2",externalArrangementId:"9669274787995385962"},instructedAmount:{amount:"5000.55",currencyCode:"EUR"},remittanceInformation:"Salary"}}}]},{status:400,body:{message:"Bad Request",errors:[{message:"Value Exceeded. Must be between {min} and {max}.",key:"common.api.shoesize",context:{max:"50",min:"1"}}]}},{status:403,body:{message:"Access to requested resource denied.",errors:[{message:"Resource access denied due to an insufficient user quota of {quota}.",key:"common.api.quota",context:{quota:"someQuota"}}]}}]},{urlPattern:"/client-api/v2/payment-templates",method:"POST",responses:[{status:201,body:{template:{id:"7d341c28-6714-11e7-907b-a6006ad3dba0",name:"Salary for John",createdAt:"2020-04-12T14:33:13.452Z",serviceAgreementId:"d6fdc581-1306-412a-9e40-86d851190acf",details:{paymentType:"SEPA_CREDIT_TRANSFER",originatorAccount:{arrangementId:"729190df-a421-4937-94fd-5e1a3da132cc",externalArrangementId:"729190421493794513132",identification:{identification:"NL53RABO0309349755",schemeName:"IBAN"}},instructionPriority:"NORM",transferTransactionInformation:{counterparty:{name:"John Smith",postalAddress:{addressLine1:"Schippersstraat 15, 1011AZ, Amsterdam",country:"NL"}},counterpartyAccount:{identification:{identification:"FR708933019952AUNHQNQ0KZ",schemeName:"IBAN"},arrangementId:"fe9d66ae-b927-4ac7-8799-c5a38a596ff2",externalArrangementId:"9669274787995385962"},instructedAmount:{amount:"5000.55",currencyCode:"EUR"},remittanceInformation:"Salary"}}}}},{status:400,body:{message:"Bad Request",errors:[{message:"Value Exceeded. Must be between {min} and {max}.",key:"common.api.shoesize",context:{max:"50",min:"1"}}]}},{status:403,body:{message:"Access to requested resource denied.",errors:[{message:"Resource access denied due to an insufficient user quota of {quota}.",key:"common.api.quota",context:{quota:"someQuota"}}]}}]},{urlPattern:"/client-api/v2/payment-templates/{paymentTemplateId}",method:"PUT",responses:[{status:202,body:{template:{id:"7d341c28-6714-11e7-907b-a6006ad3dba0",name:"Salary for John",createdAt:"2020-04-12T14:33:13.452Z",serviceAgreementId:"d6fdc581-1306-412a-9e40-86d851190acf",details:{paymentType:"SEPA_CREDIT_TRANSFER",originatorAccount:{arrangementId:"729190df-a421-4937-94fd-5e1a3da132cc",externalArrangementId:"729190421493794513132",identification:{identification:"NL53RABO0309349755",schemeName:"IBAN"}},instructionPriority:"NORM",transferTransactionInformation:{counterparty:{name:"John Smith",postalAddress:{addressLine1:"Schippersstraat 15, 1011AZ, Amsterdam",country:"NL"}},counterpartyAccount:{identification:{identification:"FR708933019952AUNHQNQ0KZ",schemeName:"IBAN"},arrangementId:"fe9d66ae-b927-4ac7-8799-c5a38a596ff2",externalArrangementId:"9669274787995385962"},instructedAmount:{amount:"5000.55",currencyCode:"EUR"},remittanceInformation:"Salary"}}}}},{status:400,body:{message:"Bad Request",errors:[{message:"Value Exceeded. Must be between {min} and {max}.",key:"common.api.shoesize",context:{max:"50",min:"1"}}]}},{status:403,body:{message:"Access to requested resource denied.",errors:[{message:"Resource access denied due to an insufficient user quota of {quota}.",key:"common.api.quota",context:{quota:"someQuota"}}]}},{status:404,body:{message:"Resource not found.",errors:[{message:"Unable to find the resource requested resource: {resource}.",key:"common.api.resource",context:{resource:"aResource"}}]}}]}])}}]);